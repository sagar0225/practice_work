
        $this->validate($request, [
            'name' => 'required',
            'email' => 'required',
            'password'=>'required',
            'file'=>'required|mimes:jpeg,png,jpg,pdf|max:2048',
        ]);
        $file = $request->file('file');
        $fileName = time() . '_' . $file->getClientOriginalName();
        $file->storeAs('uploads', $fileName, 'public');
        $crudapi = Crudapi::create($request->all());
    
        return response()->json($crudapi, 201);
	------------------------------------------------------------------------------
	 public function updateUser(Request $request, $id)
    {
        // Validate the request data
        $request->validate([
            'name' => 'string',
            'file' => 'mimes:jpeg,png,jpg,pdf|max:2048',
            'email' => 'email|unique:users,email,' . $id,
            'password' => 'min:6',
        ]);

        // Find the user by ID
        $user = User::find($id);

        if (!$user) {
            return response()->json(['message' => 'User not found'], 404);
        }

        // Update the user information
        $user->name = $request->input('name', $user->name);

        if ($request->hasFile('file')) {
            // Handle the file upload if a new file is provided
            $file = $request->file('file');
            $fileName = time() . '_' . $file->getClientOriginalName();
            $file->storeAs('uploads', $fileName, 'public');
            $user->file_path = $fileName;
        }

        $user->email = $request->input('email', $user->email);

        if ($request->filled('password')) {
            // Update the password if a new one is provided
            $user->password = Hash::make($request->input('password'));
        }

        // Save the updated user record
        $user->save();

        // Return a response
        return response()->json(['message' => 'User updated successfully']);
    }